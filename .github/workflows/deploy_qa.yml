name: deploy-qa Pipeline

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies for front-end
        run: |
          pnpm install

      - name: Inject environment variables
        run: |
          touch .env
          echo "VITE_API_BASE_URL=${{ secrets.BASE_URL_QA }}" >> .env

      - name: Build front-end
        run: |
          pnpm run build

      - name: Inject environment variables
        run: |
          cd bff
          touch .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI_QA }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "PORT=${{ secrets.PORT_QA }}" >> .env

      - name: Install dependencies for back-end
        run: |
          cd bff
          pnpm install

      - name: Upload front-end build files
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: dist

      - name: Upload back-end files
        uses: actions/upload-artifact@v3
        with:
          name: bff
          path: bff

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download front-end build files
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: ./dist

      - name: Download back-end files
        uses: actions/download-artifact@v3
        with:
          name: bff
          path: ./bff

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: .github/workflows/sitst-client.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Delete old version file in VM
        env:
          REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          sshpass -p "$REMOTE_PASSWORD" ssh -t -o StrictHostKeyChecking=no -p 22 $REMOTE_USER@$REMOTE_HOST << 'EOF'
            cd /home/sysadmin
            rm -rf distQA
            rm -rf bffQA
          EOF

      - name: Copy front-end build files to VM
        run: |
          sshpass -p "${{ secrets.REMOTE_PASSWORD }}" scp -P 22 -r dist ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/sysadmin/distQA

      - name: Copy back-end files to VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Copying files to VM..."
          touch bff/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> bff/.env
          echo "MONGO_URI=${{ secrets.MONGO_URI_QA }}" >> bff/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> bff/.env
          echo "PORT=${{ secrets.PORT_QA }}" >> bff/.env
          sshpass -p "${{ secrets.REMOTE_PASSWORD }}" scp -P 22 -r bff ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/sysadmin/bffQA
          echo "Files copied successfully."

      - name: Deploy to server
        env:
          REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          sshpass -p "$REMOTE_PASSWORD" ssh -t -o StrictHostKeyChecking=no -p 22 $REMOTE_USER@$REMOTE_HOST << 'EOF'
            cd /home/sysadmin
            docker compose -p classcraft-backoffice-qa -f compose.backoffice.qa.yaml down || true
            docker compose -p classcraft-backoffice-qa -f compose.backoffice.qa.yaml up -d --build
          EOF